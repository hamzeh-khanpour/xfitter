#!/usr/bin/env python
print "This code-generating script was written for an older version and is currently broken and needs to be rewritten.\nSorry!"
exit(-1)

''' Script to generate templates for a new evolution module '''

import sys
import os
import datetime

if len(sys.argv)<2:
  print "Usage: "+__file__+" NAME\n Expects working directory to be xFitter root directory"
  exit(1)
if not os.path.isdir("evolutions"):
  print "evolutions directory not found"
  exit(2)
name=sys.argv[1]
prefix="evolutions/"+name
if os.path.isdir(prefix):
  print prefix+" already exists"
  exit(3)
classname=None
if name[-1].isupper():
  classname=name+"_Evol"
else:
  classname=name+"Evol"

print "Creating directories in "+prefix
os.makedirs(prefix+"/include")
os.makedirs(prefix+"/src")
os.makedirs(prefix+"/yaml")
formatDict={"name":name,"classname":classname,"date":datetime.date.today().isoformat(),"scriptname":__file__}

filename=prefix+"/yaml/parameters.yaml"
print "Creating YAML file "+filename
with open(filename,"w") as f:f.write(
'''//Automatically generated by {scriptname} on {date}
class: {name}
#YOUR DEFAULT PARAMETERS HERE
'''.format(**formatDict))

filename=prefix+"/include/"+classname+".h"
print "Creating header file "+filename

with open(filename,"w") as f:
  f.write('''//Automatically generated by {scriptname} on {date}
#pragma once
#include"BaseEvolution.h"

namespace xfitter{{

/**
  @class {classname}

  @brief A class for {name} evolution

  ADD DESCRIPTION HERE

*/

class {classname}:public BaseEvolution{{
  public:
    {classname}(const char*name):BaseEvolution(name){{}}
    virtual const char*getClassName()const override final{{return"{name}";}};
    virtual void atStart()override final;
    virtual void atIteration()override final;
    virtual void atConfigurationChange()override final;
    virtual std::function<std::map<int,double>(double const&x,double const&Q)>xfxQMap()override final;
    virtual std::function<void(double const&x,double const&Q,double*pdfs)>xfxQArray()override final;
    virtual std::function<double(int const&i,double const&x,double const&Q)>xfxQDouble()override final;
    virtual std::function<double(double const&Q)>AlphaQCD()override final;
}};
}}
'''.format(**formatDict)
)

filename=prefix+"/src/"+classname+".cc"
print "Creating source file "+filename
with open(filename,"w") as f:
  f.write('''//Automatically generated by {scriptname} on {date}

#include"{classname}.h"
//These might be useful
//#include"xfitter_cpp_base.h" //for hf_errlog
#include"xfitter_pars.h"

namespace xfitter{{
//for dynamic loading
extern"C" {classname}*create(const char*s){{return new {classname}(s);}}

void {classname}::atStart(){{
  //YOUR CODE HERE
}}

void {classname}::atIteration(){{
  //YOUR CODE HERE
}}

void {classname}::atConfigurationChange(){{
  //YOUR CODE HERE
}}

std::function<std::map<int,double>(double const&x,double const&Q)>{classname}::xfxQMap(){{
  //YOUR CODE HERE
}}

std::function<void(double const&x,double const&Q,double*pdfs)>{classname}::xfxQArray(){{
  //YOUR CODE HERE
}}

std::function<double(int const&i,double const&x,double const&Q)>{classname}::xfxQDouble(){{
  //YOUR CODE HERE
}}

std::function<double(double const&Q)>{classname}::AlphaQCD(){{
  //YOUR CODE HERE
}}

}}
'''.format(**formatDict)
) 

filename=prefix+"/src/Makefile.am"
print "Creating autoconf file "+filename
with open(filename,"w") as f:
  f.write('''#Automatically generated by {scriptname} on {date}
AM_CXXFLAGS=-I$(srcdir)/../include -I$(srcdir)/../../BaseEvolution/include -I$(srcdir)/../../../include -I$(srcdir)/../../../interfaces/include -Wall -fPIC -Wno-deprecated 

lib_LTLIBRARIES=lib{classname}_xfitter.la
lib{classname}_xfitter_la_SOURCES={classname}.cc

datadir=${{prefix}}/yaml/evolutions/{name}
data_DATA=../yaml/parameters.yaml

dist_noinst_HEADERS=../include ../yaml
'''.format(**formatDict))

def insertLine(filename,after,line):
  after=after.replace('/',r'\/')
  if line[0]==' ':line='\\'+line
  s="sed -i '/{}/a{}' {}".format(after,line,filename)
  os.system(s)
print "Updating configure.ac"
insertLine("configure.ac","evolutions/BaseEvolution/src/Makefile","                 {}/src/Makefile".format(prefix))
print "Updating Makefile.am"
insertLine("Makefile.am","evolutions/BaseEvolution/src","        {}/src\\\\".format(prefix))
print "Updating doxygen.cfg"
insertLine("doxygen.cfg","evolutions/QCDNUM/include","                         {0}/src\\\\\\n                         {0}/include\\\\".format(prefix))
print "Updating Reactions.txt"
insertLine("Reactions.txt","BaseEvolution",name+" lib"+classname+"_xfitter.so")
