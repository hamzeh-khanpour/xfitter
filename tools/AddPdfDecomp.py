#!/usr/bin/env python
print "This code-generating script was written for an older version and is currently broken and needs to be rewritten.\nSorry!"
exit(-1)

''' Script to generate templates for new PDF decomposition '''

import sys
import os
import datetime

if len(sys.argv)<2:
  print "Usage: "+__file__+" NAME\n Expects working directory to be xFitter root directory"
  exit(1)
# Are we in the correct directory?
if not os.path.isdir("pdfdecompositions"):
  print "pdfdecompositions directory not found"
  exit(2)
name=sys.argv[1]
prefix="pdfdecompositions/"+name
# First check if the name is already used
if os.path.isdir(prefix):
  print prefix+" already exists"
  exit(3)
classname=None
if name[-1].isupper():
  classname=name+"_PdfDecomp"
else:
  classname=name+"PdfDecomp"

print "Creating directories in "+prefix
os.makedirs(prefix+"/include")
os.makedirs(prefix+"/src")
#here this script used to create an empty prefix+"/yaml/parameters.yaml", but I do not see why --Ivan

formatDict={"name":name,"classname":classname,"date":datetime.date.today().isoformat(),"scriptname":__file__}

hFile=prefix+"/include/"+classname+".h"
print "Creating header file "+hFile

with open(hFile,"w") as f:
  f.write('''//Automatically generated by {scriptname} on {date}
#pragma once
#include"BasePdfDecomposition.h"
//you probably want to include this
//#include"BasePdfParam.h"

namespace xfitter{{
/**
  @class {classname}

  @brief A class for {name} pdf decomposition

  ADD DESCRIPTION HERE

*/
class {classname}:public BasePdfDecomposition{{
  public:
    {classname}(const char*name):BasePdfDecomposition(name){{}};
    //virtual ~BasePdfDecomposition()
    virtual const char*getClassName()const override final{{return"{name}";}};
    virtual std::function<std::map<int,double>(const double&x)>f0()const override final;
    virtual void atStart(); //use this to get parameterisations
    virtual void atIteration(); //use this to enforce sum rules
    //virtual void atConfigurationChange();
}};
}}
'''.format(**formatDict)
)

sFile=prefix+"/src/"+classname+".cc"
print "Creating source file "+sFile

with open(sFile,"w") as f:
  f.write('''//Automatically generated by {scriptname} on {date}
#include"{classname}.h"
//These might be useful
#include "xfitter_pars.h"
//#include"xfitter_cpp_base.h" //for hf_errlog
//#include<cmath>
//#include<iostream>
namespace xfitter{{
//for dynamic loading
extern"C" {classname}*create(const char*name){{return new {classname}(name);}}

void {classname}::atStart(){{
  //YOUR CODE HERE; THE FOLLOWING IS A SUGGESTION
  const YAML::Node node=XFITTER_PARS::getDecompositionNode(_name);
  //???=getParameterisation(node["???"].as<string>());
  //...
}}

void {classname}::atIteration(){{
  //YOUR CODE HERE
  //Enforce sum rules
}}

std::function<std::map<int,double>(const double&x)>{classname}::f0()const{{
  return[=](double const&x)->std::map<int,double>{{
    //YOUR CODE HERE
    //retrieve and rotate pdf here
    return std::map<int, double>{{
      //change zeros to something meaningful
      {{-6,0}},
      {{-5,0}},
      {{-4,0}},
      {{-3,0}},//sbar
      {{-2,0}},//dbar
      {{-1,0}},//ubar
      {{ 1,0}},//d
      {{ 2,0}},//u
      {{ 3,0}},//s
      {{ 4,0}},
      {{ 5,0}},
      {{ 6,0}},
      {{21,0}}//gluon
    }};
  }};
}}

}}
'''.format(**formatDict)
)

aFile=prefix+"/src/Makefile.am"
print "Creating automake file "+aFile

with open(aFile,"w") as f:
  f.write('''#Automatically generated by {scriptname} on {date}
AM_CXXFLAGS=-I$(srcdir)/../include -I$(srcdir)/../../../include -I$(srcdir)/../../../pdfparams/BasePdfParam/include/ -I$(srcdir)/../../BasePdfDecomposition/include -Wall -fPIC -Wno-deprecated

lib_LTLIBRARIES=lib{classname}_xfitter.la
lib{classname}_xfitter_la_SOURCES={classname}.cc
dist_noinst_HEADERS=../include
'''.format(**formatDict))

def insertLine(filename,after,line):
  after=after.replace('/',r'\/')
  if line[0]==' ':line='\\'+line
  s="sed -i '/{}/a{}' {}".format(after,line,filename)
  os.system(s)
print "Updating configure.ac"
insertLine("configure.ac","pdfdecompositions/BasePdfDecomposition/src/Makefile","                 {}/src/Makefile".format(prefix))
print "Updating Makefile.am"
insertLine("Makefile.am","pdfdecompositions/BasePdfDecomposition/src","        {}/src\\\\".format(prefix))
print "Updating doxygen.cfg"
insertLine("doxygen.cfg","pdfdecompositions/BasePdfDecomposition/include","                         {}/include\\\\".format(prefix))
print "Updating Reactions.txt"
insertLine("Reactions.txt","UvDvubardbars",name+" lib"+classname+"_xfitter.so")
