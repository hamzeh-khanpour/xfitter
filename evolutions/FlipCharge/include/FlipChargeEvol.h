//Automatically generated by ./tools/AddEvolution.py on 2018-12-25
#pragma once
#include"BaseEvolution.h"

namespace xfitter{
/**
  @class FlipChargeEvol

  @brief A class for FlipCharge modifier evolution

  Takes as input another evolution and switches each quark with antiquark.
  This turns a particle into an antiparticle.

  In YAML configuration, provide another evolution's name as "input"
*/
class FlipChargeEvol:public BaseEvolution{
  public:
    FlipChargeEvol(const char*name):BaseEvolution(name){}
    virtual const char*getClassName()const override final{return"FlipCharge";};
    virtual void atStart()override final;
    virtual void atConfigurationChange()override final;
    virtual std::function<std::map<int,double>(double const&x,double const&Q)>xfxQMap()override final;
    virtual std::function<void(double const&x,double const&Q,double*pdfs)>xfxQArray()override final;
    virtual std::function<double(int const&i,double const&x,double const&Q)>xfxQDouble()override final;
    virtual std::function<double(double const&Q)>AlphaQCD()override final;
  private:
    BaseEvolution*input;
};
}
